// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth (NextAuth)
  accounts Account[]
  sessions Session[]

  // Relations
  installations Installation[]
  subscription  Subscription?
  apiKeys       ApiKey[]

  @@index([email])
  @@map("users")
}

// ============================================
// INSTALLATIONS & WIDGET CONFIG
// ============================================

model Installation {
  id        String   @id @default(cuid())
  userId    String
  clientId  String   @unique // amber_xyz123 (unique identifier for widget)
  
  // Config
  name              String
  domain            String
  assistantName     String   @default("Amber AI")
  accentColor       String   @default("#22d3ee")
  avatarUrl         String?
  position          String   @default("bottom-right") // bottom-right, bottom-left, top-right, top-left
  welcomeMessage    String?
  
  // Status & Metrics
  status            InstallationStatus @default(ACTIVE)
  messageCount      Int                @default(0)
  lastMessageAt     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]
  messages Message[]

  @@index([userId])
  @@index([clientId])
  @@index([status])
  @@map("installations")
}

enum InstallationStatus {
  ACTIVE
  PAUSED
  DELETED
}

// ============================================
// SUBSCRIPTIONS & BILLING
// ============================================

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  
  // Stripe
  stripeCustomerId       String?  @unique
  stripeSubscriptionId   String?  @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  // Plan & Usage
  plan               Plan    @default(FREE)
  status             SubscriptionStatus @default(ACTIVE)
  messageLimit       Int     @default(100)
  messagesUsed       Int     @default(0)
  installationLimit  Int     @default(1)
  
  // Billing Period
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

// ============================================
// TRIAL (per user/tenant)
// ============================================

model Trial {
  id        String   @id @default(cuid())
  userId    String   @unique
  status    TrialStatus @default(NOT_STARTED)
  startedAt DateTime?
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("trials")
}

enum TrialStatus {
  NOT_STARTED
  ACTIVE
  EXPIRED
}

// ============================================
// CHAT SESSIONS & MESSAGES
// ============================================

model ChatSession {
  id             String   @id @default(cuid())
  sessionId      String   @unique // UUID from widget
  installationId String
  
  messageCount   Int      @default(0)
  lastMessageAt  DateTime @default(now())
  
  // Metadata
  userAgent      String?
  ipAddress      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  installation Installation @relation(fields: [installationId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([installationId])
  @@index([sessionId])
  @@index([lastMessageAt])
  @@map("chat_sessions")
}

model Message {
  id             String   @id @default(cuid())
  installationId String
  sessionId      String
  
  role    MessageRole
  content String      @db.Text
  
  // Metadata
  metadata      Json? // { latencyMs, sources, model, etc }
  tokensUsed    Int?
  
  createdAt DateTime @default(now())

  // Relations
  installation Installation @relation(fields: [installationId], references: [id], onDelete: Cascade)
  session      ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([installationId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("messages")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// ============================================
// NEXTAUTH TABLES
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// API KEYS (for external integrations)
// ============================================

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  
  name      String
  key       String   @unique // hashed
  prefix    String   // First 8 chars for display (e.g., "sk_live_...")
  lastUsed  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@index([prefix])
  @@map("api_keys")
}

// ============================================
// WEBHOOK EVENTS (Stripe, Clerk, etc)
// ============================================

model WebhookEvent {
  id              String   @id @default(cuid())
  provider        String   // 'stripe', 'clerk'
  externalEventId String   @unique // Stripe event ID, Clerk event ID
  type            String   // Event type (e.g., 'customer.subscription.updated')
  payload         Json     // Full event payload
  processed       Boolean  @default(false)
  processingError String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([externalEventId])
  @@index([provider])
  @@index([type])
  @@index([processed])
  @@index([createdAt])
  @@map("webhook_events")
}

// ============================================
// USAGE LOGS (for analytics & debugging)
// ============================================

model UsageLog {
  id             String   @id @default(cuid())
  installationId String
  sessionId      String?
  
  eventType      String   // 'message_sent', 'widget_loaded', 'error'
  eventData      Json?
  
  createdAt DateTime @default(now())

  @@index([installationId])
  @@index([sessionId])
  @@index([eventType])
  @@index([createdAt])
  @@map("usage_logs")
}
